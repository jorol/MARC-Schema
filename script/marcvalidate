#!/usr/bin/env perl

use strict;
use warnings;

our $VERSION = '0.01';

use Getopt::Long 'HelpMessage';
use MARC::Parser::RAW;
use MARC::Parser::XML;
use MARC::Schema;

GetOptions(
    'file|f=s'   => \my $file,
    'type|t=s'   => \( my $type = 'RAW' ),
    'schema|s=s' => \my $schema_file,
    'help|h'     => sub { HelpMessage() },
) or HelpMessage();

$file = shift unless defined($file);

HelpMessage() unless defined $file and -e $file;

my $schema = MARC::Schema->new({file => $schema_file});

my $parser;
if ( $type eq 'RAW' ) {
    $parser = MARC::Parser::RAW->new($file);
}
elsif ( $type eq 'XML' ) {
    $parser = MARC::Parser::XML->new($file);
}
else {
    print qq{type '$type' not supported. Use 'RAW' or 'XML'};
}

my $record_count = 0;
while ( my $record = $parser->next() ) {
    $record_count++;
    my @result = $schema->check($record);
    if (@result > 0) {
        print_error($record_count, \@result);
    }
}

sub print_error {
    my ($record_count, $error) = @_;
    foreach my $error (@{$error}) {
        if ($error->{subfields}) {
            foreach my $subfield_code (keys %{$error->{subfields}}) {
                print qq{$record_count\t$error->{tag}\t$error->{subfields}->{$subfield_code}->{message}\t$subfield_code\n};
            }
        }
        if ($error->{message}) {
            print qq{$record_count\t$error->{tag}\t$error->{message}\n};
        }
    }
}

=head1 NAME

marcvalidate - Validate a file with MARC21 records

=head1 SYNOPSIS

  $ marcvalidate [options] FILE

  options:
  --type,-t         Type of MARC21 serialization (RAW|XML, default: RAW)
  --schema,-s       Location MARC JSON schema
  --help,-h         Print this help

=head1 AUTHOR

Johann Rolschewski E<lt>jorol@cpan.orgE<gt>

=head1 COPYRIGHT

Copyright 2018- Johann Rolschewski

=head1 LICENSE

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
